# calc_height.py

"""
Automate the generation of site height lookup tables and associated code.
Lookup tables are generated for common species, a range of ages, and site indexes
Requests for trees not present in the lookup table are handled by htcalc.f.
"""

import os
import sys
import numpy
import numpy.f2py

os.environ['PATH'] = '{};{}'.format(r'C:\MinGW\bin', os.environ['PATH'])
variants = {
    'pn':'pyfvspnc'
    , 'wc':'pyfvswcc'
    }

args = ['--fcompiler=gnu95'
        # , '--help-fcompiler'
        , '-c', '-m', 'htcalc'
        , '--build-dir', r'C:\workspace\Open-FVS\google_code\branches\PyFVS\bin\release\soc\f2py'
        , '--include-paths'
        ]

include_dirs = r'C:\workspace\Open-FVS\google_code\branches\PyFVS\common;C:\workspace\Open-FVS\google_code\branches\PyFVS\so\common'
# TODO: This may not be true for OSX
if os.name == 'nt':
    args.append(include_dirs)
else:
    # F2PY expects a colon separated list, not semicolon
    args = args.append(':'.join(include_dirs.split(';')))

src = r'C:\workspace\Open-FVS\google_code\branches\PyFVS\so\src\htcalc.f'
args.append(src)

sys.argv = [sys.argv[0], ] + args
numpy.f2py.f2py2e.run_compile()

sys.exit()

var = sys.argv[1]
fvs = __import__(variants[var])

spp = [6, 7, 16, 18, 19, 22]
age = numpy.arange(1, 201, 1)
site = numpy.arange(50, 151)

out = open(os.path.join(os.path.split(__file__)[0], '{}_siteht_mod.f90'.format(var)), 'w')

sppcodes = [fvs.fvsspeciescode(s)[0].strip() for s in range(1, 40)]

spp_lu = [0] * 39
for i, sp in enumerate(spp):
    spp_lu[sp - 1] = i + 1

x = [','.join(str(s) for s in spp_lu[i:i + 10]) for i in range(0, len(spp_lu), 10)]
s = ' &\n        ,'.join('{}'.format(y) for y in x)

spp_lst = ';'.join('{}:{}'.format(sppcodes[sp - 1], sp) for sp in spp)

out.write("""module siteht_mod
    !------------------------------------------------
    ! This module is auto-generated by calc_height.py
    !------------------------------------------------
    implicit none

    integer, parameter :: min_site={min_site}
    integer, parameter :: max_site={max_site}
    integer, parameter :: min_age={min_age}
    integer, parameter :: max_age={max_age}
    
    real :: siteht_lu({num_age},{num_site},{num_lu}) !(age,site,spp_lu)
    integer :: spp_lu(39)
    
    integer :: fail_over(39) = 0
    integer :: lu_tally(39) = 0
    
    data spp_lu(:) / &\n        {spp_lu}/

    !--------------------------------------------
    ! Site Height Look Tables for common species:
    ! {spp_lst}
    !--------------------------------------------

""".format(
        num_age=len(age), num_site=len(site)
        , min_site=min(site), max_site=max(site)
        , min_age=min(age), max_age=max(age)
        , spp_lu=s, num_lu=len(spp)
        , spp_lst=spp_lst)
)

for idx, sp in enumerate(spp):
    for s, si in enumerate(site):
        out.write('    !{} (:,{},{})\n'.format(sppcodes[sp - 1], si, sp))
        out.write('    data siteht_lu(:,{},{}) / &\n            '.format(s + 1, idx + 1))

        rows = []
        i = 0
        for j in range(10, len(age), 10):
            h = ','.join('{:5.1f}'.format(fvs.htcalc(si, sp, a),) for a in age[i:j])
            rows.append(h)
            i = j

        h = ','.join('{:5.1f}'.format(fvs.htcalc(si, sp, a),) for a in age[i:])
        rows.append(h)
        data = ' &\n            ,'.join(rows)
        out.write('{}/\n'.format(data))

out.write("""
    contains
    subroutine get_siteht(si,spp,age,siteht)
        integer :: spp
        real :: si,siteht,age
        
        integer :: age_idx, site_idx, spp_idx
        
        !f2py intent(in) :: spp,si,age
        !f2py intent(out) :: siteht

        ! Return the precalculated value if the species, age, and site are
        !   represented, otherwise calculate the site height
        spp_idx = spp_lu(spp)
        if (spp_idx > 0 &
                .and. (min_age <= age .and. age <= max_age) &
                .and. (min_site <= si .and. si <= max_site) &
                ) then
            ! Offset the age and site to the array index
            ! Height by age is represented by two's as used in FINDAG
            !   odd year ages are rounded down
            !age_idx = int((age - min_age)*0.5) + 1
            age_idx = int(age - min_age) + 1
            site_idx = int(si - min_site + 1)
            siteht = siteht_lu(age_idx,site_idx,spp_idx)

            lu_tally(spp) = lu_tally(spp)+1
        else
            fail_over(spp) = fail_over(spp)+1
            call htcalc(si,spp,age,siteht,0,0)
        endif
        
        return
        
    end subroutine get_siteht
end module siteht_mod
"""
)
out.close()
